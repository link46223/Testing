/* Blake Stackhouse */

#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <pthread.h>
#include <math.h>
#include <sys/types.h>
#define M_PI 3.14159265358979323846

/* How to run - Gcc OperatingSystemsAssignment1.c -Wall -pedantic -pthread */
double myPi1;
double myPi2;
pthread_mutex_t lock;
pthread_mutex_t lock2;

void *myThread(void *vargp){
	int myid = (int)vargp;
    int i;
    double totalFirst;
    double totalSecond;
    for(i=0;i<500000;i++){
        totalFirst = ((i * myid+2)/(i * myid+1));
        
        if(i%2 == 0){
            totalSecond+=(1/(2 * i+1));
        } else {
            totalSecond-=(1/(2 * i+1));
        }
        
        pthread_mutex_lock(&lock);
        myPi1 *= totalFirst;
        pthread_mutex_unlock(&lock);
        
        pthread_mutex_lock(&lock2);
        myPi2 += totalSecond;
        pthread_mutex_unlock(&lock2);
    }
    
    return 0;
}

int main(){

	pthread_t tid[8];
	int i = 0;
	for(i=0;i<8;i++){
		pthread_create(&tid[i], NULL, &myThread, (void *)&tid);
	}
    
	for(i=0;i<8;i++){
        pthread_join(tid[i],NULL);
	}
    
    /*pthread_mutex_destroy(&lock);
    pthread_mutex_destroy(&lock2);*/
    
    printf("%0.15f\n",myPi1);
    
    printf("Pi Total Method 1 = %0.15f \n",(myPi1*2));
    printf("Pi Total Method 2 = %0.15f \n",(myPi2*4));
    
    printf("Method 1 off by %0.15f \n", (M_PI - myPi1*2));
    printf("Method 2 off by %0.15f \n", (M_PI - (myPi2*4)));
	return 0;
}
